<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-03-19T11:52:17-06:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Ogden Studios</title><subtitle>Practical solutions for pragmatic people</subtitle><entry><title type="html">How do I get an A+ in Mozilla Observatory with WordPress?</title><link href="http://localhost:4000/2019/03/11/how-do-i-get-an-a-plus-mozilla-observatory-wordpress.html" rel="alternate" type="text/html" title="How do I get an A+ in Mozilla Observatory with WordPress?" /><published>2019-03-11T00:00:00-06:00</published><updated>2019-03-11T00:00:00-06:00</updated><id>http://localhost:4000/2019/03/11/how-do-i-get-an-a-plus-mozilla-observatory-wordpress</id><content type="html" xml:base="http://localhost:4000/2019/03/11/how-do-i-get-an-a-plus-mozilla-observatory-wordpress.html">&lt;p&gt;I recently wrote a blog post about &lt;a href=&quot;https://ogdenstudios.xyz/2019/03/03/how-do-i-get-an-a-plus-mozilla-observatory-jekyll-netlify.html&quot;&gt;getting an A+ in the Mozilla Observatory with Jekyll and Netlify&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I wrote that post as I completed a Jekyll site for a client. My next projects are going to be WordPress sites, so it makes sense to do the same for the WordPress platform. Here’s how you can get an A+ on the Mozilla Observatory with a WordPress website.&lt;/p&gt;

&lt;h2 id=&quot;step-1-create-a-new-wordpress-website&quot;&gt;Step 1: Create a new WordPress website&lt;/h2&gt;

&lt;p&gt;This blog post assumes some technical knowledge, and setting up a WordPress site requires more than a few commands. I won’t go through the entire setup process. But I personally love &lt;a href=&quot;https://www.dreamhost.com/&quot;&gt;Dreamhost&lt;/a&gt;. Here’s how you can &lt;a href=&quot;https://www.dreamhost.com/&quot;&gt;install WordPress on a Dreamhost server&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Setting up WordPress through Dreamhost will give us access to the WordPress administration panel and an SFTP user. We’ll need both sets of credentials to complete the process.&lt;/p&gt;

&lt;h2 id=&quot;step-2-check-the-baseline-wordpress-grade&quot;&gt;Step 2: Check the baseline WordPress grade&lt;/h2&gt;

&lt;p&gt;Once you have WordPress spun up, log in, set up your admin account, and don’t do anything. Let’s see how a fresh WordPress install fares on &lt;a href=&quot;https://observatory.mozilla.org&quot;&gt;Mozilla Observatory&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;With a fresh WordPress 5.1 install, our website scores an &lt;strong&gt;F&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;step-3-set-up-https&quot;&gt;Step 3: Set up HTTPS&lt;/h2&gt;

&lt;p&gt;You’ll need to have an SSL certification for your site. With Dreamhost, I use &lt;a href=&quot;https://www.dreamhost.com/hosting/ssl-tls-certificates/&quot;&gt;Let’s Encrypt&lt;/a&gt; because I think SSL certificates should be free.&lt;/p&gt;

&lt;p&gt;When you analyze your site through Mozilla Observatory, you’ll be presented with a series of recommendations for improving your score. The first recommendation is automatically redirecting from HTTP to HTTPS.&lt;/p&gt;

&lt;p&gt;First, we’ll need to change this in the WordPress administration settings.&lt;/p&gt;

&lt;p&gt;Go to &lt;strong&gt;Dashboard &amp;gt; Settings &amp;gt; General &amp;gt; WordPress Address/Site Address&lt;/strong&gt; - make sure it begins with &lt;code class=&quot;highlighter-rouge&quot;&gt;https://&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Next, you’ll want to set up that redirect in the &lt;code class=&quot;highlighter-rouge&quot;&gt;.htaccess&lt;/code&gt; file as well.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://help.dreamhost.com/hc/en-us/articles/115000675027-FTP-overview-and-credentials&quot;&gt;SFTP into your server&lt;/a&gt; and edit the &lt;code class=&quot;highlighter-rouge&quot;&gt;.htaccess&lt;/code&gt; file in the root of your WordPress directory. To set up the HTTPS redirect, it should look like:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# BEGIN WordPress
&amp;lt;IfModule mod_rewrite.c&amp;gt;
    RewriteEngine On
    RewriteCond %{SERVER_PORT} !^443$
    RewriteRule (.*) https://%{HTTP_HOST}%{REQUEST_URI} [R=301,L]
    RewriteBase /
    RewriteRule ^index\.php$ - [L]
    RewriteCond %{REQUEST_FILENAME} !-f
    RewriteCond %{REQUEST_FILENAME} !-d
    RewriteRule . /index.php [L]
&amp;lt;/IfModule&amp;gt;
# END WordPress
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now check your Mozilla Observatory score again and you’ll see you’ve gotten a 20/100 score and passed 6/11 tests now. Still an &lt;strong&gt;F&lt;/strong&gt;, but we’re improving.&lt;/p&gt;

&lt;h2 id=&quot;step-4-set-your-headers-in-a-child-theme&quot;&gt;Step 4: Set your headers in a child theme&lt;/h2&gt;

&lt;p&gt;Mozilla will walk you through which headers to set, one at a time, and explain what each one does. I won’t be going over these in-depth in this post. I encourage you to walk through the process yourself.&lt;/p&gt;

&lt;p&gt;In order to set these headers, we’ll want to use a &lt;code class=&quot;highlighter-rouge&quot;&gt;functions.php&lt;/code&gt; file in a child theme. This will allow us to easily set the headers through the WordPress administration page.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.hostinger.com/tutorials/how-to-create-wordpress-child-theme&quot;&gt;Create a child theme&lt;/a&gt; and then add the following to the bottom of the &lt;strong&gt;child theme’s&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;functions.php&lt;/code&gt; file:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/** Custom security HTTP headers **/
function add_security_header($headers) {
	$headers['Content-Security-Policy'] = &quot;base-uri 'self'; default-src 'self'; form-action 'self'; frame-ancestors 'none'; img-src 'self'; script-src 'self'; style-src 'self'&quot;;
	$headers['Referrer-Policy'] = 'no-referrer';
	$headers['Strict-Transport-Security'] = 'max-age=63072000; includeSubDomains';
	$headers['X-Content-Type-Options'] = 'nosniff';
	$headers['X-Frame-Options'] = 'DENY';
	return $headers;
}

add_filter('wp_headers', 'add_security_header');
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;With these headers, a blank Jekyll site should score an A+ on Mozilla Observatory with a score of 115/100. It will also clear almost all the Content Security Policy checks they run.&lt;/p&gt;

&lt;p&gt;I did my best to make these settings as restrictive as possible, but WordPress breaks under the strictest settings. Setting the &lt;code class=&quot;highlighter-rouge&quot;&gt;default-src&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;script-src&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;style-src&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;'self'&lt;/code&gt; will allow WordPress to function as expected.&lt;/p&gt;

&lt;p&gt;Even with those changes, the CSP is pretty locked down. You may find you need to make adjustments to these headers to get certain tools and components to work on your site. This puts you in a good spot because it’s good practice to make the necessary changes intentionally instead of trying to fix broken security policies retroactively.&lt;/p&gt;

&lt;h2 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h2&gt;

&lt;p&gt;Getting an A+ on Mozilla Observatory doesn’t guarantee your site is entirely secure, especially if you’re running WordPress. There is a wealth of information out there about locking down a WordPress site. A few things to consider:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://jetpack.com/support/getting-started-with-jetpack/&quot;&gt;Set up JetPack&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://css-tricks.com/snippets/wordpress/remove-wp-generator-meta-tag/&quot;&gt;Remove the WP generator meta tag&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://codex.wordpress.org/Configuring_Automatic_Background_Updates&quot;&gt;Configure auto-updates for WordPress Core, themes, and plug-ins&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you end up purchasing hosting with Dreamhost, please consider using my personal &lt;a href=&quot;https://www.dreamhost.com/r.cgi?2263245&quot;&gt;referral link&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><category term="blog" /><category term="tutorial" /><category term="wordpress" /><category term="observatory" /><category term="security" /><summary type="html">I recently wrote a blog post about getting an A+ in the Mozilla Observatory with Jekyll and Netlify.</summary></entry><entry><title type="html">How do I get an A+ in Mozilla Observatory with Jekyll and Netlify?</title><link href="http://localhost:4000/2019/03/03/how-do-i-get-an-a-plus-mozilla-observatory-jekyll-netlify.html" rel="alternate" type="text/html" title="How do I get an A+ in Mozilla Observatory with Jekyll and Netlify?" /><published>2019-03-03T00:00:00-07:00</published><updated>2019-03-03T00:00:00-07:00</updated><id>http://localhost:4000/2019/03/03/how-do-i-get-an-a-plus-mozilla-observatory-jekyll-netlify</id><content type="html" xml:base="http://localhost:4000/2019/03/03/how-do-i-get-an-a-plus-mozilla-observatory-jekyll-netlify.html">&lt;p&gt;When I need to build a blog or static site, my go-to is JAMstack with &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; and &lt;a href=&quot;https://www.netlify.com/&quot;&gt;Netlify&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I also try and build out secure websites. I used to think it really only mattered on sites that process personal or sensitive information. But then I listened to &lt;a href=&quot;https://shoptalkshow.com/episodes/250-web-security-april-king-alex-sexton/&quot;&gt;episode 250 of the Shop Talk Show&lt;/a&gt;. April King and Alex Sexton talked about the different ways even static sites can get hijacked, serve up malicious content, and otherwise make the internet a bad place.&lt;/p&gt;

&lt;p&gt;After listening to that podcast, I started using the &lt;a href=&quot;https://observatory.mozilla.org/&quot;&gt;Mozilla Observatory&lt;/a&gt; to audit all my projects and improve my security. In most cases, fixing security vulnerabilities was straightforward, but I have consistently had issues configuring the proper security headers with Jekyll and Netlify.&lt;/p&gt;

&lt;p&gt;Here’s how I finally got an A+ for my Jekyll/Netlify site on Observatory.&lt;/p&gt;

&lt;h2 id=&quot;step-1-create-a-new-jekyll-project&quot;&gt;Step 1: Create a new Jekyll project&lt;/h2&gt;

&lt;p&gt;In a terminal, run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll new secure-jekyll-site&lt;/code&gt;. I’ve named this project &lt;code class=&quot;highlighter-rouge&quot;&gt;secure-jekyll-site&lt;/code&gt;, you can choose any project name you wish.&lt;/p&gt;

&lt;p&gt;Change into the secure Jekyll directory by running &lt;code class=&quot;highlighter-rouge&quot;&gt;cd secure-jekyll-site&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Initialize the git repository with &lt;code class=&quot;highlighter-rouge&quot;&gt;git init&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Make the initial git commit with:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git add .
git commit -m &quot;init commit&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://help.github.com/en/articles/adding-an-existing-project-to-github-using-the-command-line&quot;&gt;Upload the repo to GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;step-2-deploy-to-netlify&quot;&gt;Step 2: Deploy to Netlify&lt;/h2&gt;

&lt;p&gt;Follow the instructions to &lt;a href=&quot;https://www.netlify.com/docs/continuous-deployment/&quot;&gt;deploy a Jekyll site to Netlify&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Netlify’s tools are beyond the scope of this post, but they are excellent. If you’re into JAMstack development, I’d recommend getting familiar with them.&lt;/p&gt;

&lt;p&gt;For now, let’s continue by securing our initial deploy. The goal is to start off with the most restrictive set of policies possible. What you should find as you build out your site on top of this boilerplate is certain assets (images, styles, scripts) won’t load as expected. That’s the goal. You’ll have to learn to modify your headers and security policies to allow these assets and other functionality to your site. This practice will put you in a position to make intentional choices about which policies to relax.&lt;/p&gt;

&lt;h2 id=&quot;step-3-check-the-initial-installation-with-observatory&quot;&gt;Step 3: Check the initial installation with Observatory&lt;/h2&gt;

&lt;p&gt;Visit the &lt;a href=&quot;https://observatory.mozilla.org/&quot;&gt;Mozilla Observatory&lt;/a&gt; and enter your Netlify domain in the form. You’ll likely find the scan comes back with a grade of &lt;strong&gt;D+&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In the top right hand corner, in the box labeled &lt;strong&gt;Recommendation&lt;/strong&gt;, you’ll find Mozilla provides easy-to-read and helpful advice to improve your security headers. This blog post won’t cover those in depth. Mozilla will prompt you to make one change at a time and re-scan your site. If you want to get a good feel for the process, I’d recommend going step by step.&lt;/p&gt;

&lt;p&gt;The trick I found was figuring out how to deploy these changes to the live site. For the life of me, I couldn’t figure out what I was missing. The rest of this blog should clarify the process of updating and improving your headers for the Mozilla Observatory security check.&lt;/p&gt;

&lt;h2 id=&quot;step-4-add-a-headers-file-and-include-it-in-your-jekyll-build-process&quot;&gt;Step 4: Add a headers file and include it in your Jekyll build process&lt;/h2&gt;

&lt;p&gt;In order to provide Netlify with custom headers, you need to add a &lt;code class=&quot;highlighter-rouge&quot;&gt;_headers&lt;/code&gt; file to your project, &lt;a href=&quot;https://www.netlify.com/docs/headers-and-basic-auth/&quot;&gt;as outlined in the Netlify docs&lt;/a&gt;. Add this file in the &lt;strong&gt;root of your Jekyll project&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;However, if you were to run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll build&lt;/code&gt; or deploy Netlify right now - the &lt;code class=&quot;highlighter-rouge&quot;&gt;_headers&lt;/code&gt; file wouldn’t be available. Jekyll isn’t set up to add it to the compiled &lt;code class=&quot;highlighter-rouge&quot;&gt;_site&lt;/code&gt; folder yet.&lt;/p&gt;

&lt;p&gt;To &lt;a href=&quot;https://jekyllrb.com/docs/configuration/options/&quot;&gt;configure Jekyll&lt;/a&gt; to add the &lt;code class=&quot;highlighter-rouge&quot;&gt;_headers&lt;/code&gt; file to your build process, use the &lt;code class=&quot;highlighter-rouge&quot;&gt;include&lt;/code&gt; option. Inside your &lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt; file, add &lt;code class=&quot;highlighter-rouge&quot;&gt;include: [&quot;_headers&quot;]&lt;/code&gt; to _config.yml.&lt;/p&gt;

&lt;p&gt;Now when you build your Jekyll site, &lt;code class=&quot;highlighter-rouge&quot;&gt;_headers&lt;/code&gt; will appear in the site root on Netlify. you can add the appropriate fixes as instructed by Mozilla.&lt;/p&gt;

&lt;h2 id=&quot;step-5-add-restrictive-headers-to-your-site&quot;&gt;Step 5: Add restrictive headers to your site&lt;/h2&gt;

&lt;p&gt;Now that &lt;code class=&quot;highlighter-rouge&quot;&gt;_headers&lt;/code&gt; works on your Netlify deploy, you can add the appropriate headers to get an &lt;strong&gt;A+&lt;/strong&gt;. Again, I’d recommend you make these changes step by step, following along with Mozilla to understand each piece of the process and make your own informed decisions. These are the headers that provide an &lt;strong&gt;A+&lt;/strong&gt; on the boilerplate Jekyll project:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/* 
    Content-Security-Policy: base-uri 'self'; default-src 'none'; form-action 'self'; frame-ancestors 'self'; img-src 'self'; script-src 'self'; style-src 'self'
    Referrer-Policy: same-origin
    X-Content-Type-Options: nosniff
    X-Frame-Options: DENY
    X-XSS-Protection: 1; mode=block
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;With these headers, a blank Jekyll site should score an &lt;strong&gt;A+&lt;/strong&gt; on Mozilla Observatory with a score of &lt;strong&gt;120/100&lt;/strong&gt;. It will also clear all the Content Security Policy checks they run.&lt;/p&gt;

&lt;p&gt;It will be as restrictive as possible, so you may find you need to make adjustments to these headers to get certain tools and components to work on your site. Again, it’s good practice to make the necessary changes intentionally, vs. trying to fix broken security policies retroactively.&lt;/p&gt;

&lt;h2 id=&quot;next-steps&quot;&gt;Next steps&lt;/h2&gt;

&lt;p&gt;As I mentioned, some components may not work properly with these restrictive settings. The first you’ll notice is the icon set provided by the &lt;a href=&quot;https://github.com/jekyll/minima&quot;&gt;minima theme&lt;/a&gt;. In the footer, you’ll notice there ought to be a GitHub and Twitter icon. Those won’t load with these settings, but changing &lt;code class=&quot;highlighter-rouge&quot;&gt;default-src&lt;/code&gt; in the content security policy to &lt;code class=&quot;highlighter-rouge&quot;&gt;'self'&lt;/code&gt; should do so. Consider &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/default-src&quot;&gt;reading about default-src at the MDN docs&lt;/a&gt; before making this change, yourself. I won’t be making it, to keep this boilerplate project as restrictive as possible.&lt;/p&gt;

&lt;p&gt;If you’d like to use this boilerplate for your own Jekyll projects, you can &lt;a href=&quot;https://github.com/ogdenstudios/secure-jekyll-site&quot;&gt;fork the Secure Jekyll Site repo&lt;/a&gt;. You can also see the live site &lt;a href=&quot;https://secure-jekyll-site.netlify.com/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;All the Observatory scores listed here are current as of March 3, 2019&lt;/em&gt;&lt;/p&gt;</content><author><name></name></author><category term="blog" /><category term="tutorial" /><category term="jekyll" /><category term="netlify" /><category term="observatory" /><category term="security" /><category term="JAMstack" /><summary type="html">When I need to build a blog or static site, my go-to is JAMstack with Jekyll and Netlify.</summary></entry><entry><title type="html">How do I add an Amazon Database to my Rails app?</title><link href="http://localhost:4000/2019/02/07/how-do-i-add-an-amazon-database-to-my-rails-app.html" rel="alternate" type="text/html" title="How do I add an Amazon Database to my Rails app?" /><published>2019-02-07T00:00:00-07:00</published><updated>2019-02-07T00:00:00-07:00</updated><id>http://localhost:4000/2019/02/07/how-do-i-add-an-amazon-database-to-my-rails-app</id><content type="html" xml:base="http://localhost:4000/2019/02/07/how-do-i-add-an-amazon-database-to-my-rails-app.html">&lt;p&gt;This is a follow up post to my blog titled: &lt;a href=&quot;https://ogdenstudios.xyz/2019/01/30/how-do-i-deploy-a-rails-6-app-to-amazon-ec-2.html&quot;&gt;How do I deploy a Rails 6 App to Amazon EC2?&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I’ll be continuing to work on the example Trackerr app, and my next step is to add a production-ready database to the application.&lt;/p&gt;

&lt;p&gt;To summarize part one, we’ve got a blank Rails 6 Beta app with a placeholder route, controller, and view. It’s set up with &lt;a href=&quot;https://capistranorb.com/&quot;&gt;Capistrano&lt;/a&gt; for easy deploys. It uses SQLite3 as a database, which is fine for development purposes, but won’t scale well if the application takes off in popularity.&lt;/p&gt;

&lt;p&gt;The Trackerr app lives on an Amazon EC2 instance, which makes the Amazon RDS Database instance a natural choice for adding a production database.&lt;/p&gt;

&lt;p&gt;This blog post will follow as I:&lt;/p&gt;

&lt;p&gt;1) Set up an Amazon RDS database instance with postgresql&lt;/p&gt;

&lt;p&gt;2) Configure Trackerr to connect to the database&lt;/p&gt;

&lt;p&gt;3) Test the database configuration and implementing a user authentication system with &lt;a href=&quot;https://github.com/plataformatec/devise&quot;&gt;Devise&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;step-1-set-up-an-amazon-rds-database-running-postgresql&quot;&gt;Step 1: Set up an Amazon RDS database running Postgresql&lt;/h2&gt;

&lt;p&gt;I chose postgres as a database system because it’s a common choice amongst Rails devs. Additionally, it’s the database Heroku uses for their applications, and my intention is to use these blogposts as a guide for migrating away from Heroku as a web host. Using a similar stack to Heroku should help things go smoothly.&lt;/p&gt;

&lt;p&gt;First, &lt;a href=&quot;https://console.aws.amazon.com&quot;&gt;sign in or sign up with Amazon AWS&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the navbar, choose &lt;strong&gt;Services&lt;/strong&gt; and then &lt;strong&gt;RDS&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;On the next page, click on your &lt;strong&gt;DB Instances&lt;/strong&gt; link.&lt;/p&gt;

&lt;p&gt;In the RDS instance console, choose &lt;strong&gt;Create Database&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;At the bottom of the page, you can select an option to &lt;strong&gt;Only enable options eligible for RDS Free Usage Tier&lt;/strong&gt;. If you select this option, you’ll see PostgreSQL is still available. Select that box.&lt;/p&gt;

&lt;p&gt;You’ll be taken to a page titled &lt;strong&gt;Specify DB details&lt;/strong&gt;. I kept all the settings default, except the required values at the bottom:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;DB Instance Identifier:&lt;/strong&gt; I chose “trackerr-db-0” for this&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Master username:&lt;/strong&gt; I chose a logical username here, but won’t list it for security reasons.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Master Password:&lt;/strong&gt; I used a secure password generator here and stored it in my password manager.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Take note of these values somewhere secure and convenient (such as a password manager). You’ll need them shortly.&lt;/p&gt;

&lt;p&gt;Click &lt;strong&gt;Next&lt;/strong&gt; and you’ll be taken to the &lt;strong&gt;Configure advanced settings&lt;/strong&gt; page. I kept most of these settings default, although you’ll want to make sure that &lt;strong&gt;Public accessibility&lt;/strong&gt; is set to true, so our EC2 instance can access the database. If we were doing all of our development inside Elastic Beanstalk or a VPC, we could set this to false, but that’s not quite how we’ve set up the project, so this needs to be true to work.&lt;/p&gt;

&lt;p&gt;Click &lt;strong&gt;Create Database&lt;/strong&gt; and then &lt;strong&gt;View DB Instance Details&lt;/strong&gt;. It can take 20-30 minutes for the database to fully spin up, so keep that in mind as we move on to the next steps, you may need to wait before the necessary information is available.&lt;/p&gt;

&lt;h2 id=&quot;step-2-configure-our-rails-app-to-connect-to-the-database&quot;&gt;Step 2: Configure our rails app to connect to the database&lt;/h2&gt;

&lt;p&gt;I’ll be following along the instructions &lt;a href=&quot;https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/create_deploy_Ruby.rds.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;First I’m going to modify my Gemfile. I want Trackerr to use PostgreSQL in Production, and SQLite3 in development.&lt;/p&gt;

&lt;p&gt;Let’s add a &lt;a href=&quot;https://depfu.com/blog/2017/01/18/bundler-and-gemfile-best-practices&quot;&gt;production block&lt;/a&gt; to the Gemfile. It should look like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# ~/dev/trackerr/Gemfile 
group :production do 
  gem 'pg'
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can just stick that at the end of the file. It tells the Gemfile to use the ‘pg’ (postgres) gem only when running in a production environment. Up next, we’ll tell our application to use the sqlite3 gem in development.&lt;/p&gt;

&lt;p&gt;In that same file, find the line which reads &lt;code class=&quot;highlighter-rouge&quot;&gt;gem 'sqlite3'&lt;/code&gt;. It’s likely towards the top of the Gemfile Rails generated.&lt;/p&gt;

&lt;p&gt;Move it into the block which starts &lt;code class=&quot;highlighter-rouge&quot;&gt;group :development, :test do&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So you should now have a development and test block which reads:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# ~/dev/trackerr/Gemfile
group :development, :test do
  # Call 'byebug' anywhere in the code to stop execution and get a debugger console
  gem 'byebug', platforms: [:mri, :mingw, :x64_mingw]
  # Use sqlite3 as the database for Active Record
  gem 'sqlite3'
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Run a &lt;code class=&quot;highlighter-rouge&quot;&gt;bundle install&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;rails s&lt;/code&gt; to make sure the local environment is still working correctly.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# ~
local$ bundle install 
local$ rails s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If everything looks in order, here’s a great place for a git commit.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# ~ 
local$ git add .
local$ git commit -m &quot;add pg gem and move sqlite3 gem to dev/test&quot;
local$ git push 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we’ll update the database configuration YAML file according to &lt;a href=&quot;https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/create_deploy_Ruby.rds.html&quot;&gt;these specs&lt;/a&gt;. You’ll notice there is already some configuration for the &lt;code class=&quot;highlighter-rouge&quot;&gt;production:&lt;/code&gt; block part of your &lt;code class=&quot;highlighter-rouge&quot;&gt;database.yml&lt;/code&gt; file, so make sure to replace it all with the code below.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# ~/dev/trackerr/config/database.yml
production:
  adapter: postgresql
  encoding: utf8
  database: &amp;lt;%= Rails.application.credentials[:RDS_DB_NAME] %&amp;gt;
  username: &amp;lt;%= Rails.application.credentials[:RDS_USERNAME] %&amp;gt;
  password: &amp;lt;%= Rails.application.credentials[:RDS_PASSWORD] %&amp;gt;
  host: &amp;lt;%= Rails.application.credentials[:RDS_HOSTNAME] %&amp;gt;
  port: &amp;lt;%= Rails.application.credentials[:RDS_PORT] %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Since Rails 5.2, we’ve had access to the &lt;code class=&quot;highlighter-rouge&quot;&gt;master.key&lt;/code&gt; file, which encrypts configuration variables and allows you to check them directly into source control, avoiding the need for complex environment variable setups. &lt;a href=&quot;https://ogdenstudios.xyz/2019/01/30/how-do-i-deploy-a-rails-6-app-to-amazon-ec-2.html&quot;&gt;Part 1&lt;/a&gt; of this series covers how to configure the master key correctly. If you’ve done so, you can add these values using &lt;a href=&quot;https://www.engineyard.com/blog/rails-encrypted-credentials-on-rails-5.2&quot;&gt;this guide&lt;/a&gt;, or by following along with me.&lt;/p&gt;

&lt;p&gt;In your application directory, open up the encrypted credentials file:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# ~/dev/trackerr
local$ EDITOR=vim rails credentials:edit 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the editor, add the following values:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;RDS_DB_NAME: postgres
RDS_USERNAME: **YOUR_USERNAME_HERE**
RDS_PASSWORD: **YOUR_PASSWORD_HERE**
RDS_HOSTNAME: **YOUR_ENDPOINT_HERE**
RDS_PORT: **YOUR_PORT_HERE**
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In your values, paste in the name of the database we set up, the username we chose, the password we created. If you recall in step one, we chose a master username and master password. Use those for the fields labeled &lt;code class=&quot;highlighter-rouge&quot;&gt;YOUR_USERNAME_HERE&lt;/code&gt; and  &lt;code class=&quot;highlighter-rouge&quot;&gt;YOUR_PASSWORD_HERE&lt;/code&gt;. Your RDS_HOSTNAME will be provided on the RDS console. Visit the Amazon AWS Console, select &lt;strong&gt;RDS&lt;/strong&gt;, choose your database, and then find the “Endpoint” value under &lt;strong&gt;Connectivity&lt;/strong&gt;. The port value will be listed underneath, as well.&lt;/p&gt;

&lt;h2 id=&quot;step-3-configure-your-ec2-instance-to-work-with-postgres&quot;&gt;Step 3: Configure your EC2 instance to work with postgres&lt;/h2&gt;

&lt;p&gt;You won’t be able to run capistrano quite yet. You’ll need to make sure your EC2 instance has access to the software packages the pg gem requires. SSH into your EC2 instance and run:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# ~
ubuntu$ sudo apt-get install postgresql-client libpq5 libpq-dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With these pre-reqs in place, we can deploy to production from our local machine, running:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# ~/dev/trackerr

cap production deploy 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;step-4-test-the-database-configuration-with-devise&quot;&gt;Step 4: Test the database configuration with Devise&lt;/h2&gt;

&lt;p&gt;I’m not going to dive too deep into the design of Trackerr quite yet. Blog posts detailing the actual development will come later in this series. But I do know we’ll want to have a user authentication system.&lt;/p&gt;

&lt;p&gt;One of the most battle-tested solutions for this is the &lt;a href=&quot;https://github.com/plataformatec/devise&quot;&gt;Devise gem&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you’ve never built your own authentication and authorization system, you might want to get some experience with that before reaching for the devise gem. The &lt;a href=&quot;https://www.railstutorial.org/book/modeling_users&quot;&gt;Michael Hartl Ruby on Rails tutorial&lt;/a&gt; has a great section on building user authentication from scratch. But in order to get things up and running quickly, I’m going to start with Devise.&lt;/p&gt;

&lt;p&gt;Including the Devise setup is a great way to test our database configuration worked, because it requires a functioning database to work correctly, so if we can set up this initial user system, we’ll know we were successful.&lt;/p&gt;

&lt;p&gt;Add the Devise gem to your gemfile:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# ~/dev/trackerr/Gemfile 
gem 'devise'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Run a bundle install and then run the Devise generator:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# ~/dev/trackerr
local$ bundle install 
local$ rails generate devise:install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Devise will prompt you for some initial configuration.&lt;/p&gt;

&lt;p&gt;In a later part of this series, we’ll dive deeper into a production configuration for Devise, but for a quickstart, here’s what you need to know:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;We need to have our root routed to some controller method, which we do from part 1.&lt;/li&gt;
  &lt;li&gt;We need to set up the defaults for the Devise mailer. You can do this quickly by adding &lt;code class=&quot;highlighter-rouge&quot;&gt;config.action_mailer.default_url_options = { host: 'localhost', port: 3000 }&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;config/environments/development.rb&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Devise expects a way to display &lt;a href=&quot;https://api.rubyonrails.org/classes/ActionDispatch/Flash.html&quot;&gt;flash&lt;/a&gt; notices to your views. In &lt;code class=&quot;highlighter-rouge&quot;&gt;trackerr/app/views/layouts/application.html.erb&lt;/code&gt;, make sure you have the following markup, preferably towards the top of your document:&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# ~/dev/trackerr/app/views/layouts/application.html.erb
&amp;lt;% flash.each do |key, value| %&amp;gt;
  &amp;lt;div class=&quot;alert alert-&amp;lt;%= key %&amp;gt;&quot;&amp;gt;&amp;lt;%= value %&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;% end %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With that quick (and incomplete, for now) configuration, it’s time to generate a devise model for the users.&lt;/p&gt;

&lt;p&gt;Generate the devise model for users and migrate: 
Need to adjust to inherit from active record [6.0] in migrate files&lt;/p&gt;

&lt;p&gt;Run:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# ~/dev/trackerr
local$ rails generate devise User 
local$ rails db:migrate
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I found that when I tried to run &lt;code class=&quot;highlighter-rouge&quot;&gt;rails db:migrate&lt;/code&gt;, I ran into an ActiveRecord error. It seems Devise didn’t specify the correct ActiveRecord class for inheritance. If you get errors when migrating, open up the migration file which ends in &lt;code class=&quot;highlighter-rouge&quot;&gt;_devise_create_users.rb&lt;/code&gt;. You’ll find it in the &lt;code class=&quot;highlighter-rouge&quot;&gt;db/migrate&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;Find the line which reads &lt;code class=&quot;highlighter-rouge&quot;&gt;class DeviseCreateUsers &amp;lt; ActiveRecord::Migration&lt;/code&gt; (it should be right at the top of the file) and change it to: &lt;code class=&quot;highlighter-rouge&quot;&gt;class DeviseCreateUsers &amp;lt; ActiveRecord::Migration[6.0]&lt;/code&gt;. This sets the ActiveRecord class to the updated version (in sync with the Rails 6.0.0 beta we’re using).&lt;/p&gt;

&lt;p&gt;Finally, let’s seed the initial user. In your &lt;code class=&quot;highlighter-rouge&quot;&gt;db/seeds.rb&lt;/code&gt; file,&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# ~/dev/trackerr/db/seeds.rb
User.create!(
    email: &quot;yourname@yourdomain.com&quot;,
    password: Rails.application.credentials[:ADMIN_PASSWORD]
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Again, notice we’re using the encrypted credentials file. I’ve added an &lt;code class=&quot;highlighter-rouge&quot;&gt;ADMIN_PASSWORD&lt;/code&gt; field to the credentials by running &lt;code class=&quot;highlighter-rouge&quot;&gt;EDITOR=vim rails credentials:edit&lt;/code&gt; again.&lt;/p&gt;

&lt;p&gt;In order for Capistrano to take advantage of your seeds, we need to add an additional gem.&lt;/p&gt;

&lt;p&gt;In your Gemfile, add the capistrano rails db gem:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# ~/dev/trackerr/Gemfile
...
gem 'capistrano-rails-db'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And in your Capfile, add it as a requirement:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# ~/dev/trackerr/Capfile
...
require 'capistrano/rails/db'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Finally, let’s commit to git and deploy:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# ~/dev/trackerr
local$ git add .
local$ git commit -m &quot;add devise gem and initial user seed&quot;
local$ git push 
local$ cap production deploy 
local$ cap production deploy:db:seed
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can visit your sign in page at yourdomain.com/users/sign_in and confirm that it worked. Enter your information and make sure you get a flash message saying you’ve successfully signed in!&lt;/p&gt;</content><author><name></name></author><category term="blog" /><category term="tutorial" /><category term="rails" /><category term="aws" /><category term="postgres" /><category term="RDS" /><summary type="html">This is a follow up post to my blog titled: How do I deploy a Rails 6 App to Amazon EC2?.</summary></entry><entry><title type="html">How do I Deploy a Rails 6 app to Amazon EC2?</title><link href="http://localhost:4000/2019/01/30/how-do-i-deploy-a-rails-6-app-to-amazon-ec-2.html" rel="alternate" type="text/html" title="How do I Deploy a Rails 6 app to Amazon EC2?" /><published>2019-01-30T00:00:00-07:00</published><updated>2019-01-30T00:00:00-07:00</updated><id>http://localhost:4000/2019/01/30/how-do-i-deploy-a-rails-6-app-to-amazon-ec-2</id><content type="html" xml:base="http://localhost:4000/2019/01/30/how-do-i-deploy-a-rails-6-app-to-amazon-ec-2.html">&lt;h2 id=&quot;why-i-wrote-this-blog-post&quot;&gt;Why I wrote this blog post&lt;/h2&gt;

&lt;p&gt;I’ve been building Rails apps for some time now. I’ve been mostly relying on &lt;a href=&quot;https://heroku.com&quot;&gt;Heroku&lt;/a&gt; to for my deploys.&lt;/p&gt;

&lt;p&gt;I love Heroku. They make an excellent product, and it’s great for quick prototypes and small hobby servers. But for more involved projects, the cost and lack of control don’t work for me. I figured it was time to start managing my own infrastructure.&lt;/p&gt;

&lt;p&gt;Additionally, the &lt;a href=&quot;https://edgeguides.rubyonrails.org/6_0_release_notes.html&quot;&gt;Ruby on Rails 6 beta&lt;/a&gt; just came out, and I wanted to spin up a demo project and check it out.&lt;/p&gt;

&lt;p&gt;Writing the blog post helped me to learn and solidify my understanding of what all goes into taking a Rails 6 beta project from 0 to AWS, and I hope you find it helpful as well.&lt;/p&gt;

&lt;h2 id=&quot;who-should-read-this-blog-post&quot;&gt;Who should read this blog post&lt;/h2&gt;

&lt;p&gt;This blog posts assumes some prior knowledge of Ruby on Rails. I learned what I know from:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.railstutorial.org/book&quot;&gt;The Michael Hartl Tutorial&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=7-1HCWbu7iU&amp;amp;list=PL23ZvcdS3XPLNdRYB_QyomQsShx59tpc-&quot;&gt;12 Rails Apps in 12 Weeks by Mackenzie Childs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It also assumes knowledge of command line interfaces, SSH, VIM, and git. Here are some good places to start for that:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.davidbaumgold.com/tutorials/command-line/&quot;&gt;Getting around the Command Line&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.robertelder.org/what-is-ssh/&quot;&gt;What is SSH?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.openvim.com/&quot;&gt;VIM&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://try.github.io/&quot;&gt;Try Git&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This blog should help you if:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You also want to start moving your projects off Heroku.&lt;/li&gt;
  &lt;li&gt;You have told someone you could move their project off Heroku and on to AWS and you have never done that before.&lt;/li&gt;
  &lt;li&gt;You’ve never done server configuration before, but you’ve got to learn very quickly.&lt;/li&gt;
  &lt;li&gt;You’d like to correct my personal mistakes via blog post.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;how-this-blog-post-works&quot;&gt;How this blog post works&lt;/h2&gt;

&lt;p&gt;I’ll be writing out each step of my process in creating a blank Rails 6 application and deploying it to a barebones EC2 instance. I will focus special attention on the steps that tripped me up as I performed them.&lt;/p&gt;

&lt;p&gt;I’m going to use my actual commands, filepaths, and project names. That means you’ll likely need to do some substitution as you follow along, depending on your specific use case. Each command will be preceded by &lt;code class=&quot;highlighter-rouge&quot;&gt;local$&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;ubuntu$&lt;/code&gt; to denote if you should be in your local terminal, or a shell on your EC2 instance, respectively. At the top of each codeblock is a comment with the working directory or file.&lt;/p&gt;

&lt;p&gt;By the end of the blog post, you should have a fresh Rails 6 application running on an Amazon EC2 instance, and the ability to push local changes to your server using Capistrano.&lt;/p&gt;

&lt;h2 id=&quot;step-1-get-rails-6&quot;&gt;Step 1: Get Rails 6&lt;/h2&gt;

&lt;p&gt;I’m going to assume you already have ruby, bundler, and rails installed on your local dev machine, because you have some Ruby on Rails experience. If that’s the case, all you need to do is get the latest rails gem.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# ~
local$ gem install rails --pre 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;step-2-create-a-rails-6-project&quot;&gt;Step 2: Create a Rails 6 project&lt;/h2&gt;

&lt;p&gt;Make a new project with the Rails 6 beta&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# ~/dev
local$ rails _6.0.0beta1_ new trackerr
local$ cd trackerr
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;An initial &lt;code class=&quot;highlighter-rouge&quot;&gt;bundle install&lt;/code&gt; never hurts&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# ~/dev/trackerr
local$ bundle install 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Check that the rails app works&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# ~/dev/trackerr
local$ rails s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In your browser, you should see something like this at localhost:3000&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/rails-6-ec2-tutorial-1/rails-6-success.png&quot; alt=&quot;Rails 6 Default Index Screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is my favorite place for an init commit in git: It’s fresh, it’s new, it works. I haven’t broken anything yet.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# ~/dev/trackerr
local$ git add . 
local$ git commit -m &quot;init commit&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;step-3-push-to-github-or-other-similar-platform&quot;&gt;Step 3: Push to GitHub (or other similar platform).&lt;/h2&gt;

&lt;p&gt;I use GitHub for my repositories, so YMMV, but I’m going to get this fresh Rails project checked into GitHub ASAP.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://help.github.com/articles/create-a-repo/&quot;&gt;Here’s the GitHub doc for creating a new repository&lt;/a&gt;, or you can follow along below:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Go to &lt;a href=&quot;https://github.com&quot; target=&quot;_blank&quot; rel=&quot;noopener noreffer&quot;&gt;https://github.com&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Sign in or sign up.&lt;/li&gt;
  &lt;li&gt;Click the plus sign button&lt;/li&gt;
  &lt;li&gt;Click &lt;strong&gt;New Repository&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Name it &lt;strong&gt;trackerr&lt;/strong&gt; (or whatever you’d like to name your project).&lt;/li&gt;
  &lt;li&gt;Add a description. For my project, that description is: &lt;strong&gt;Full Suite State Legislation Tracker&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://techcrunch.com/2019/01/07/github-free-users-now-get-unlimited-private-repositories/&quot;&gt;GitHub allows unlimited private repos now&lt;/a&gt;, but I’ll keep it public, because I love open source.&lt;/li&gt;
  &lt;li&gt;Don’t initialize the repo, you’ve already got one on your machine.&lt;/li&gt;
  &lt;li&gt;Follow the on-page instructions for pushing an existing repo from command line&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I use SSH keys for my GitHub access, and setting that up is beyond the scope of this blog post, but &lt;a href=&quot;https://help.github.com/articles/adding-a-new-ssh-key-to-your-github-account/&quot;&gt;here is a good guide on how to do that&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# ~/dev/trackerr
local$ git remote add origin git@github.com:&amp;lt;YOUR ADDRESS HERE&amp;gt;
local$ git push -u origin master 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Voila, you’ve got a Rails 6 project installed on your machine and checked in to your GitHub.&lt;/p&gt;

&lt;h2 id=&quot;step-4-get-the-sample-page-ready&quot;&gt;Step 4: Get the sample page ready&lt;/h2&gt;

&lt;p&gt;In order for your Rails app to actually work on the EC2 instance, you’ll need to set up a root path in your configuration, and a corresponding controller and view.&lt;/p&gt;

&lt;p&gt;You can use the &lt;a href=&quot;https://guides.rubyonrails.org/command_line.html&quot;&gt;rails controller generator, if you like&lt;/a&gt;, or you can add it yourself. Since this blog post doesn’t cover testing or assets or any of the other nice rails magic created in the controller generators, I’m going to just manually add the bare minimum here.&lt;/p&gt;

&lt;p&gt;In &lt;code class=&quot;highlighter-rouge&quot;&gt;config/routes&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# ~/dev/trackerr/config/routes.rb 
root &quot;pages#index&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In &lt;code class=&quot;highlighter-rouge&quot;&gt;app/controllers&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# ~/dev/trackerr/app/controllers/pages_controller.rb
class PagesController &amp;lt; ApplicationController
    def index
    end
end 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And a corresponding view&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# ~/dev/trackerr/app/views/pages/index.html.erb
&amp;lt;h1&amp;gt;You did it! Great job!&amp;lt;/h1&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Add your changes and push them up to git&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# ~/dev/trackerr
local$ git add .
local$ git commit -m &quot;add home page&quot;
local$ git push 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now your barebones Rails 6 app is just about ready to live on a server.&lt;/p&gt;

&lt;h2 id=&quot;step-4-setup-capistrano&quot;&gt;Step 4: Setup Capistrano&lt;/h2&gt;

&lt;p&gt;We’re going to be using &lt;a href=&quot;https://github.com/capistrano/capistrano&quot;&gt;Capistrano&lt;/a&gt; to manage our deploy tasks. I’ll be using information found in &lt;a href=&quot;https://medium.com/@jamesarobbo/deploying-a-rails-app-to-aws-with-passenger-nginx-and-capistrano-for-the-first-time-e8a0aac7da07&quot;&gt;this article&lt;/a&gt; to describe these steps, so feel free to read along with the original article or with this tutorial.&lt;/p&gt;

&lt;p&gt;First, we’ll need to add Capistrano to the application, including some capistrano gems to manage our particular stack.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# ~/dev/trackerr/Gemfile
gem 'capistrano'
gem 'capistrano-rails'
gem 'capistrano-bundler'
gem 'capistrano-rbenv'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Run bundle install to check that this worked.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# ~/dev/trackerr
local$ bundle install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If everything worked, go ahead and commit this change (I like to make very small commits, especially when I’m working solo - so I can always see where I messed up when things eventually break)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# ~/dev/trackerr
local$ git add .
local$ git commit -m &quot;add capistrano to gemfile&quot;
local$ git push
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With Capistrano securely in your Gemfile and repository, it’s time to begin configuring it. Generate the Capistrano config files by running:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# ~/dev/trackerr
cap install STAGES=production
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This creates three files: &lt;code class=&quot;highlighter-rouge&quot;&gt;Capfile&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;config/deploy.rb&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;config/deploy/production.rb&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In the Capfile, uncomment the following lines:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# ~/dev/trackerr/Capfile
require &quot;capistrano/bundler&quot;
require &quot;capistrano/rails/assets&quot;
require &quot;capistrano/rails/migrations&quot;
require &quot;capistrano/rbenv&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I’ll set up my &lt;code class=&quot;highlighter-rouge&quot;&gt;config/deploy.rb&lt;/code&gt; to look like:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# ~/dev/trackerr/config/deploy.rb
set :puma_conf, &quot;/var/www/trackerr/shared/config/puma.rb&quot;
set :application, 'trackerr' 
set :repo_url, 'git@github.com:ogdenstudios/trackerr.git'
set :deploy_to, '/home/ubuntu/trackerr'
set :use_sudo, true
set :branch, 'master'
set :linked_dirs, fetch(:linked_dirs, []).push('log', 'tmp/pids', 'tmp/cache', 'tmp/sockets', 'vendor/bundle', 'public/system')
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We’ll configure &lt;code class=&quot;highlighter-rouge&quot;&gt;config/deploy/production.rb&lt;/code&gt; later, since it requires some EC2 specific information, which we won’t have until we set up the instance. So let’s get to it!&lt;/p&gt;

&lt;h2 id=&quot;step-5-set-up-your-amazon-ec2-instance&quot;&gt;Step 5: Set up your Amazon EC2 Instance&lt;/h2&gt;

&lt;p&gt;Go to Amazon AWS Console&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://console.aws.amazon.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener norefferer&quot;&gt;https://console.aws.amazon.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Sign in, or sign up.&lt;/p&gt;

&lt;p&gt;Once you’re logged in and have an account ready to go, click &lt;strong&gt;Services&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In the dropdown menu, select &lt;strong&gt;EC2&lt;/strong&gt; under the &lt;strong&gt;Compute&lt;/strong&gt; menu.&lt;/p&gt;

&lt;p&gt;On this new page, click &lt;strong&gt;Launch Instance&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Choose the &lt;strong&gt;Ubuntu Server 18.04 LTS (HVM), SSD Volume Type&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Click the &lt;strong&gt;Select&lt;/strong&gt; button.&lt;/p&gt;

&lt;p&gt;Since this is a starter project, I’m going to choose the t2.micro instance, eligible for the free tier.&lt;/p&gt;

&lt;p&gt;Click &lt;strong&gt;Next: Configure Instance Details&lt;/strong&gt; - nothing to change here, unless you want to.&lt;/p&gt;

&lt;p&gt;Click &lt;strong&gt;Next: Add Storage&lt;/strong&gt; - I’m going to keep the defaults here, as well, since this is really just a proof of concept kind of thing.&lt;/p&gt;

&lt;p&gt;Click &lt;strong&gt;Next: Add Tags&lt;/strong&gt; - again, nothing to go here.&lt;/p&gt;

&lt;p&gt;Click &lt;strong&gt;Next: Configure Security Group&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Select the &lt;strong&gt;Create a new security group&lt;/strong&gt; radio button&lt;/li&gt;
  &lt;li&gt;There’s already an SSH open on port 22 to 0.0.0.0/0
    &lt;ul&gt;
      &lt;li&gt;Amazon will tell you this is insecure, and they’re right. This allows people to connect via SSH from anywhere on the internet. If you have the ability to lock down your own IP address, you should choose a restricted SSH set, and limit it to your IP. I won’t go into that, and for now we aren’t setting up anything sensitive enough to really go wrong here.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Next, add a new rule. Here’s what I created:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/img/rails-6-ec2-tutorial-1/ec2-security-group.png&quot; alt=&quot;Image depicting Amazon EC2 sample security group&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Security rule settings:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Type: &lt;code class=&quot;highlighter-rouge&quot;&gt;Custom TCP&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Protocol: &lt;code class=&quot;highlighter-rouge&quot;&gt;TCP&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Port Range: &lt;code class=&quot;highlighter-rouge&quot;&gt;80&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Source: &lt;code class=&quot;highlighter-rouge&quot;&gt;Custom: 0.0.0.0/0&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Keeping port 80 open to the world is desired behavior - you want anyone to be able to access your site once it’s live.&lt;/p&gt;

&lt;p&gt;Click &lt;strong&gt;Review and Launch&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Confirm everything looks the way you want, and finally click &lt;strong&gt;Launch&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Amazon will ask you to select an existing key pari or create a new key pair. I’m assuming you either haven’t done this before (and therefore have no key pair), or, like me, are trying to set up a fully sandboxed Rails App. So let’s select &lt;strong&gt;Create a new key pair&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Name it. I’m naming mine &lt;em&gt;trackerr-key-pair&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Click &lt;strong&gt;Download Key Pair&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/rails-6-ec2-tutorial-1/key-pair-dialogue.png&quot; alt=&quot;Image depicting Amazon EC2 Key Pair Dialogue&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Save the file.&lt;/p&gt;

&lt;p&gt;Click &lt;strong&gt;Launch Instances&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Once the instances launch, amazon will give you an option to view it (along with a lot of other helpful information you should check out).&lt;/p&gt;

&lt;p&gt;I like to name my EC2 instances. If you click on the link provided by Amazon pointing to your instance, you can view your EC2 console.&lt;/p&gt;

&lt;p&gt;Under the &lt;strong&gt;Name&lt;/strong&gt; column, you can click the pencil icon to edit its name. I chose &lt;em&gt;Trackerr&lt;/em&gt;. Here’s what my Resource Groups look like after that.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/rails-6-ec2-tutorial-1/resource-groups.png&quot; alt=&quot;Image depicting Amazon EC2 Resource Groups&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Great! Now you’ve got a Rails App on your machine and in GitHub, and you have a plain EC2 instance running on AWS. It’s almost time to marry them together.&lt;/p&gt;

&lt;p&gt;Before we get to that, though, let’s set up convenient access to the server.&lt;/p&gt;

&lt;p&gt;First, find that &lt;code class=&quot;highlighter-rouge&quot;&gt;.pem&lt;/code&gt; key file you downloaded from Amazon. I’m on a Mac + FireFox, so mine ended up in &lt;code class=&quot;highlighter-rouge&quot;&gt;~/Downloads&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;I personally like to keep these kinds of files in &lt;code class=&quot;highlighter-rouge&quot;&gt;~/server-keys&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So go ahead and make a folder called &lt;code class=&quot;highlighter-rouge&quot;&gt;server-keys&lt;/code&gt; (or whatever you like) and drop it in your home directory (or wherever you like).&lt;/p&gt;

&lt;p&gt;You’ll need to set the permissions on your key so it isn’t publicly viewable. To make sure that’s the case, run:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# ~/server-keys/
local$ chmod 400 trackerr-key-pair.pem
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then you’ll want to connect to your instance using its Public DNS.&lt;/p&gt;

&lt;p&gt;The command looks like &lt;code class=&quot;highlighter-rouge&quot;&gt;ssh -i &quot;tracker-key-pair.pem&quot; ubuntu@some-dns.computer.amazon.aws&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you need a more specific command for your keypair name and DNS address, click the &lt;strong&gt;Connect&lt;/strong&gt; button in the Amazon Resource Groups panel.&lt;/p&gt;

&lt;h2 id=&quot;step-6-configure-easy-access-to-your-ec2-instance&quot;&gt;Step 6: Configure easy access to your EC2 instance&lt;/h2&gt;

&lt;p&gt;Let’s make that SSH access even more convenient by setting up an alias. I use &lt;a href=&quot;https://medium.com/swlh/power-up-your-terminal-using-oh-my-zsh-iterm2-c5a03f73a9fb&quot;&gt;zsh and oh-my-zsh&lt;/a&gt;, so I’m going to open up my .zshrc file.&lt;/p&gt;

&lt;p&gt;In command line:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# ~
local$ vim .zshrc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Everyone’s config is going to be different. Towards the bottom of my file, I’m going to add:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;alias ssh_trackerr=&quot;ssh -i ~/server-keys/trackerr-key-pair.pem ubuntu@my-server-dns.something.com&quot;;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;With the correct address in it.&lt;/p&gt;

&lt;p&gt;Once you write and save to the zsh (or whatever shell) config, restart your shell. For me, it’s just:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# ~ 
local$ zsh 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then I can run&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# ~ 
local$ ssh_trackerr
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And I’m in. I now see a new shell prompt which looks like &lt;code class=&quot;highlighter-rouge&quot;&gt;ubuntu@ip-xxx-xx-xx-xxx:~$&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;step-7-configure-capistrano-production-deploy-tasks&quot;&gt;Step 7: Configure Capistrano Production deploy tasks&lt;/h2&gt;

&lt;p&gt;Now let’s give Capistrano the ability to grab our app from GitHub and deploy. We’ve got all the information we need to configure &lt;code class=&quot;highlighter-rouge&quot;&gt;trackerr/config/deploy/production.rb&lt;/code&gt; (thanks to &lt;a href=&quot;https://stackoverflow.com/questions/12967918/deploy-with-capistrano-using-a-pem-file&quot;&gt;this helpful StackOveflow thread&lt;/a&gt;)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# ~/dev/trackerr/config/deploy/production.rb 

server 'your.ip.address.here', user: 'ubuntu', roles: %w{web app db}
set :ssh_options, { 
  forward_agent: true, 
  auth_methods: %w[publickey],
  keys: %w[/path/to/your/keypair/keypair-name.pem]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;step-8-preparing-the-server-to-run-capistrano-tasks&quot;&gt;Step 8: Preparing the server to run Capistrano tasks&lt;/h2&gt;

&lt;p&gt;Use your shiny new alias to hop in to the EC2 instance:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# ~
local$ ssh_trackerr
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Create the directory that the app will live in:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# ~
ubuntu$ sudo mkdir -p /var/www
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;By default, the ubuntu user doesn’t have access to this directory, so change the ownership:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# ~
ubuntu$ sudo chown ubuntu /var/www
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Update all existing packages on the server:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# ~
ubuntu$ sudo apt-get update &amp;amp;&amp;amp; sudo apt-get -y upgrade
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then install the dependencies required to install Ruby:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# ~
ubuntu$ sudo apt install autoconf bison build-essential libssl-dev libyaml-dev libreadline6-dev zlib1g-dev libncurses5-dev libffi-dev libgdbm5 libgdbm-dev libsqlite3-dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once those dependencies install, install rbenv. Clone the rbenv repo:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# ~
ubuntu$ git clone https://github.com/rbenv/rbenv.git ~/.rbenv
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;then, add ~/.rbenv/bin to your $PATH so you can use its CLI.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# ~
ubuntu$ echo 'export PATH=&quot;$HOME/.rbenv/bin:$PATH&quot;' &amp;gt;&amp;gt; ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Add this command to your bash profile so you can load rbenv automatically.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# ~
ubuntu$ echo 'eval &quot;$(rbenv init -)&quot;' &amp;gt;&amp;gt; ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Restart bash to get those changes to apply.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# ~
ubuntu$ source ~/.bashrc 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then we’ll install the ruby-build plugin to add &lt;code class=&quot;highlighter-rouge&quot;&gt;rbenv install&lt;/code&gt; which simplifies the install process for new Ruby versions (which we will surely need for Rails 6)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# ~
ubuntu$ git clone https://github.com/rbenv/ruby-build.git ~/.rbenv/plugins/ruby-build
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now you’ll be able to see all the available ruby versions with this command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# ~
ubuntu$ rbenv install -l
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For Rails 6, we need Ruby 2.5.0 or newer. At the time of writing, Rails 6 sets it at 2.5.1&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# ~
ubuntu$ rbenv install 2.5.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The installation may take some time. This is a good spot to make some coffee.&lt;/p&gt;

&lt;p&gt;Up next, set your global default ruby version using&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# ~
ubuntu$ rbenv global 2.5.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can check with&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# ~
ubuntu$ ruby -v
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we need to configure our ability to work with gems. First, let’s turn off local documentation generation by adding a setting to our &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.gemrc&lt;/code&gt; file&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# ~
ubuntu$ echo &quot;gem: --no-document&quot; &amp;gt; ~/.gemrc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With our gem process configured, let’s install bundler. This step gave me issues before, and I realized I installed the latest bundler, but Rails 6 generated using 1.17.1. Make sure to specify your version - the version you download on the server should match what’s written in your Gemfile.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# ~
ubuntu$ gem install bundler -v 1.17.1 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;step-9-install-a-javascript-runtime-on-ec2&quot;&gt;Step 9: Install a Javascript Runtime on EC2&lt;/h2&gt;

&lt;p&gt;The Rails Asset Pipeline requires JavaScript runtime, so let’s get Node.js&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# ~
ubuntu$ sudo add-apt-repository ppa:chris-lea/node.js
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then update apt-get and install the Node.js package:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# ~
ubuntu$ sudo apt-get update
ubuntu$ sudo apt-get install nodejs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;step-10-install-a-node-package-manager&quot;&gt;Step 10: Install a Node package manager&lt;/h2&gt;

&lt;p&gt;With Node installed, we’ll want to download the &lt;a href=&quot;https://yarnpkg.com/en/&quot;&gt;yarn&lt;/a&gt; package manager, since Rails 6 uses it by default.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# ~
ubuntu$ curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -
ubuntu$ echo &quot;deb https://dl.yarnpkg.com/debian/ stable main&quot; | sudo tee /etc/apt/sources.list.d/yarn.list
ubuntu$ sudo apt-get update
ubuntu$ sudo apt-get install yarn
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;step-11-set-up-your-ec2-server-with-your-git-credentials&quot;&gt;Step 11: Set up your EC2 server with your git credentials&lt;/h2&gt;

&lt;p&gt;If you’re using SSH keys to access your GitHub account, you’ll need to set up those credentials on your server. You can do this by following the guide at &lt;a href=&quot;https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/&quot;&gt;here&lt;/a&gt;, or you can follow along with me.&lt;/p&gt;

&lt;p&gt;Basically, you’ll run:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# EC2 ~
ubuntu$ ssh-keygen -t rsa -b 4096 -C &quot;your_email@example.com&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You’ll be prompted for a file to save the key in, choose &lt;strong&gt;Enter&lt;/strong&gt; to select the default location.&lt;/p&gt;

&lt;p&gt;You’ll be given an option to type a secure passphrase, but it’s optional, and I usually don’t.&lt;/p&gt;

&lt;p&gt;Now you can go to &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.ssh&lt;/code&gt; and run &lt;code class=&quot;highlighter-rouge&quot;&gt;vim id_rsa.pub&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Copy that file, go to GitHub, click on &lt;strong&gt;Settings&lt;/strong&gt;, then click &lt;strong&gt;SSH and GPG keys&lt;/strong&gt;. Click &lt;strong&gt;New SSH key&lt;/strong&gt; or &lt;strong&gt;Add SSH Key&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Select a title, then paste you rkey into the key field.&lt;/p&gt;

&lt;p&gt;Click &lt;strong&gt;Add SSH Key&lt;/strong&gt; and confirm your password at the prompt.&lt;/p&gt;

&lt;h2 id=&quot;step-12-give-your-server-access-to-your-masterkey&quot;&gt;Step 12: Give your server access to your master.key&lt;/h2&gt;

&lt;p&gt;In Rails 5.2+, you have the ability to manage credentials and other secrets using the &lt;code class=&quot;highlighter-rouge&quot;&gt;master.key&lt;/code&gt; file. You can read about this excellent feature &lt;a href=&quot;https://medium.com/cedarcode/rails-5-2-credentials-9b3324851336&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Capistrano requires a bit of extra configuration to get this configuration quite right. You can &lt;a href=&quot;https://waiyanyoon.com/deploying-rails-5-2-applications-with-encrypted-credentials-using-capistrano/&quot;&gt;follow these instructions&lt;/a&gt; or read along with me.&lt;/p&gt;

&lt;p&gt;Copy your local &lt;code class=&quot;highlighter-rouge&quot;&gt;master.key&lt;/code&gt; file to your server at &lt;code class=&quot;highlighter-rouge&quot;&gt;/var/www/trackerr/shared/config/master.key&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In your application’s &lt;code class=&quot;highlighter-rouge&quot;&gt;config/deploy.rb&lt;/code&gt; file, add:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# ~/dev/trackerr/config/deploy.rb 
set :linked_files, %w{config/master.key}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;step-13-configure-the-puma-application-server&quot;&gt;Step 13: Configure the Puma application server&lt;/h2&gt;

&lt;p&gt;We’ll be using the Puma application server for our rails app since it ships standard with Rails, and it should meet our needs. Capistrano requires some extra configuration for this, as well.&lt;/p&gt;

&lt;p&gt;In your Gemfile:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# ~/dev/trackerr/Gemfile
gem 'capistrano3-puma' 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Add this configuration to your capfile&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# ~/dev/trackerr/Capfile
require 'capistrano/puma'
install_plugin Capistrano::Puma  # Default puma tasks
install_plugin Capistrano::Puma::Workers  # if you want to control the workers (in cluster mode)
install_plugin Capistrano::Puma::Jungle # if you need the jungle tasks
install_plugin Capistrano::Puma::Monit  # if you need the monit tasks
install_plugin Capistrano::Puma::Nginx  # if you want to upload a nginx site template
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we’ll want to configure Puma on the server, since our local Puma configuration won’t work for the EC2 instance. On your EC2 server, create a new file at &lt;code class=&quot;highlighter-rouge&quot;&gt;/var/www/trackerr/shared/config/puma.rb&lt;/code&gt;, enter the following:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Change to match your CPU core count
workers 2

# Min and Max threads per worker
threads 1, 6

app_dir = File.expand_path(&quot;../..&quot;, __FILE__)
shared_dir = &quot;#{app_dir}/shared&quot;

# Default to production
rails_env = ENV['RAILS_ENV'] || &quot;production&quot;
environment rails_env

# Set up socket location
bind &quot;unix://#{shared_dir}/sockets/puma.sock&quot;

# Logging
stdout_redirect &quot;#{shared_dir}/log/puma.stdout.log&quot;, &quot;#{shared_dir}/log/puma.stderr.log&quot;, true

# Set master PID and state locations
pidfile &quot;#{shared_dir}/pids/puma.pid&quot;
state_path &quot;#{shared_dir}/pids/puma.state&quot;
activate_control_app

on_worker_boot do
  require &quot;active_record&quot;
  ActiveRecord::Base.connection.disconnect! rescue ActiveRecord::ConnectionNotEstablished
  ActiveRecord::Base.establish_connection(YAML.load_file(&quot;#{app_dir}/config/database.yml&quot;)[rails_env])
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;step-14-set-up-nginx&quot;&gt;Step 14: Set up NGINX&lt;/h2&gt;

&lt;p&gt;We’re going to install and configure Nginx on our server now.&lt;/p&gt;

&lt;p&gt;Head back to your home directory and install nginx.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# ~
ubuntu$ sudo apt-get install nginx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next, let’s configure the default server block:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# ~
ubuntu$ sudo vim /etc/nginx/sites-available/default
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Add the following, but replace the application and path values with yours, if you’ve changed it.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;upstream app {
    # Path to Puma SOCK file, as defined previously
    server unix:/var/www/trackerr/shared/tmp/sockets/puma.sock fail_timeout=0;
}

server {
    listen 80;
    server_name localhost;

    root /var/www/trackerr/public;

    try_files $uri/index.html $uri @app;

    location @app {
        proxy_pass http://app;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $http_host;
        proxy_redirect off;
    }

    error_page 500 502 503 504 /500.html;
    client_max_body_size 4G;
    keepalive_timeout 10;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Save and exit. This configures Nginx as a reverse proxy, so HTTP requests get forwarded to the application server via a Unix socket. Feel free to make any changes as you see fit. &lt;strong&gt;Make sure you overwrite the default config. The first time I did this, I just appended to the file, and I coudln’t figure out what was going wrong.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Restart Nginx:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# ~
ubuntu$ sudo service nginx restart 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;step-15-commit-your-local-changes-to-git-and-deploy-to-server&quot;&gt;Step 15: Commit your local changes to git and deploy to server&lt;/h2&gt;

&lt;p&gt;We’re at a place where updates to the master branch of our repo will work correclty in a Capistrano deploy. Here’s how to try it out:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# ~/dev/trackerr
local$ git add .
local$ git commit -m &quot;update with capistrano configuration&quot;
local$ git push 
local$ cap production deploy
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;step-16-check-your-work&quot;&gt;Step 16: Check your work!&lt;/h2&gt;

&lt;p&gt;Head back to your EC2 Resource console, and find the value listed under Public DNS (IPv4) - then paste that into your browser.&lt;/p&gt;

&lt;p&gt;You should be good to go! Congrats! You did it!&lt;/p&gt;

&lt;h2 id=&quot;next-steps&quot;&gt;Next steps:&lt;/h2&gt;

&lt;p&gt;You might want to do a few things now that you’ve got the skeleton of your application working:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Set up the DNS records&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://ogdenstudios.xyz/2019/02/07/how-do-i-add-an-amazon-database-to-my-rails-app.html&quot;&gt;Set up a production-level database for the application&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Actually build the application.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These tasks are outside the scope of this tutorial, but are covered in additional blog posts.&lt;/p&gt;</content><author><name></name></author><category term="blog" /><category term="tutorial" /><category term="rails" /><category term="aws" /><category term="capistrano" /><category term="nginx" /><summary type="html">Why I wrote this blog post</summary></entry></feed>